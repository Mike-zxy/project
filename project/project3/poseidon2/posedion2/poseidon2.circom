pragma circom 2.0.0;

template SBox5() {
    signal input in;
    signal output out;

    signal tmp1;
    signal tmp2;
    signal tmp3;

    tmp1 <== in * in;         // x^2
    tmp2 <== tmp1 * in;       // x^3
    tmp3 <== tmp2 * tmp1;     // x^5
    out <== tmp3;
}

template Poseidon2(t) {
    signal input inputs[t];
    signal output output;

    // Hard-coded MDS matrix 
    var MDS = [
    [
  [103743018582381476709151654222580175792233859191276717119794880178951959121269, 13812892472602277129720416369810938638464829797428505994715354238566325371174, 19901173117934624626210681860040409423929533718498334975903374653144614297837],
  [89172835968082081255879925320212929093755234474497148506340947008240635692480, 83153046911634409722001196049399296440206216880537962609781077006383364655249, 44185413503566108995705987483782920410218659350588807059423323356906489905884],
  [112118290998628815284842946480090194469789173507706245950390170435240456084295, 12250344284090074735689960213852746656750174471945915813208110217380946720466, 60923967208159211176950708606050480841977801084211605413125777672745573123936]
]
    ];

    // Hard-coded round constants 
    var RC = [
        [
  [21043280342565876185841284790017477470300028949095384718022804666580662301444, 11296882224836518933615481751502262006153856894655532731727655503751940499819, 112240495574901515191354832957681780367622151160933139232805154915891698110194],
  [14122810596758196606878609903504596060786829431721899326737275363209378266860, 23219715237903811157632887371870727230860601111224778491787486925660464905687, 2932177406996820853857078784243529861514761656948985024767197976839279090242],
 
]
    ];

    signal state[t];

    // 初始化 state
    for (var i = 0; i < t; i++) {
        state[i] <== inputs[i];
    }

    // Poseidon2 round function
    for (var r = 0; r < 30; r++) {
        // 加 round constants
        for (var i = 0; i < t; i++) {
            state[i] <== state[i] + RC[r][i];
        }

        // S-box
        if (r < 4 || r >= 26) {
            // Full round: 全部S-box
            for (var i = 0; i < t; i++) {
                component sbox = SBox5();
                sbox.in <== state[i];
                state[i] <== sbox.out;
            }
        } else {
            // Partial round: 只对第一个元素做S-box
            component sbox = SBox5();
            sbox.in <== state[0];
            state[0] <== sbox.out;
        }

        // MDS 混合
        signal new_state[t];
        for (var i = 0; i < t; i++) {
            new_state[i] <== 0;
            for (var j = 0; j < t; j++) {
                new_state[i] <== new_state[i] + MDS[i][j] * state[j];
            }
        }

        for (var i = 0; i < t; i++) {
            state[i] <== new_state[i];
        }
    }

    output <== state[0]; // 只输出第一个元素
}